doctype html
html
	head
		title Databox
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1')
		meta(name='mobile-web-app-capable', content="yes")
		meta(name="apple-mobile-web-app-capable", content="yes")
		meta(name="theme-color", content="#00838F")
		link(rel="apple-touch-icon", sizes="57x57", href="/icons/apple-icon-57x57.png")
		link(rel="apple-touch-icon", sizes="76x76", href="/icons/apple-icon-76x76.png")
		link(rel="apple-touch-icon", sizes="120x120", href="/icons/apple-icon-120x120.png")
		link(rel="apple-touch-icon", sizes="152x152", href="/icons/apple-icon-152x152.png")
		link(rel="apple-touch-icon", sizes="180x180", href="/icons/apple-icon-180x180.png")
		link(rel="icon", type="image/png", sizes="192x192", href="/icons/android-icon-192x192.png")
		link(rel="icon", type="image/png", sizes="32x32", href="/icons/favicon-32x32.png")
		link(rel="icon", type="image/png", sizes="96x96", href="/icons/favicon-96x96.png")
		link(rel="icon", type="image/png", sizes="16x16", href="/icons/favicon-16x16.png")
		link(rel="manifest", href="/icons/manifest.json")
		link(rel='stylesheet', href='https://fonts.googleapis.com/icon?family=Material+Icons')
		link(rel='stylesheet', href='/styles/databox.css')

		script(src='/socket.io/socket.io.js')
		script(src='/templates/app-list.js')
		script(src='https://code.jquery.com/jquery-3.1.0.min.js')
		script(src='https://code.getmdl.io/1.2.1/material.min.js', defer)
	body.mdl-layout.mdl-js-layout.mdl-layout--fixed-header
		header.mdl-layout__header
			div.mdl-layout__header-row
				span.mdl-layout-title
					| Databox
				div.mdl-layout-spacer
				div.mdl-textfield.mdl-js-textfield.mdl-textfield--expandable.mdl-textfield--floating-label.mdl-textfield--align-right
					label.mdl-button.mdl-js-button.mdl-button--icon(for="searchText")
						i.material-icons
							| search
					div.mdl-textfield__expandable-holder
						input.mdl-textfield__input#searchText(type="text")
			div.mdl-layout__tab-bar.mdl-js-ripple-effect
				a.mdl-layout__tab.is-active(href="#apps")
					| Apps
				a.mdl-layout__tab(href="#stores")
					| Stores
				a.mdl-layout__tab(href="#drivers")
					| Drivers
				a.mdl-layout__tab(href="#system")
					| System
		main.mdl-layout__content
			section.mdl-layout__tab-panel.is-active(id="apps")
				div.mdl-typography--text-center
					div.mdl-spinner.mdl-js-spinner.is-active
			section.mdl-layout__tab-panel(id="stores")
				div.mdl-typography--text-center
			section.mdl-layout__tab-panel(id="drivers")
				div.mdl-typography--text-center
					div.mdl-spinner.mdl-js-spinner.is-active(if="{!loaded}")
			section.mdl-layout__tab-panel(id="system")
				div.mdl-typography--text-center
					div.mdl-spinner.mdl-js-spinner.is-active
		script.
			apps = [];
			req = null;
			$('#searchText').on('input', function () {
				var text = $(this).val();
				updateAppList(apps.filter(function (app) {
					return app.name.indexOf(text) != -1;
				}));
			});

			function updateAppList(appList) {
				var icons = {
					"app": "extension",
					"driver": "developer_board",
					"store": "dns",
					"other": "settings_applications"
				}
				$('#apps').html(template({
					apps: appList.filter(function (app) {
						return !('type' in app) || (app.type === 'app');
					}),
					icons: icons
				}));
				$('#drivers').html(template({
					apps: appList.filter(function (app) {
						return app.type === 'driver';
					}),
					icons: icons
				}));
				$('#stores').html(template({
					apps: appList.filter(function (app) {
						return app.type === 'store';
					}),
					icons: icons
				}));
				$('#system').html(template({
					apps: appList.filter(function (app) {
						return 'type' in app && app.type !== 'app' && app.type !== 'driver' && app.type !== 'store';
					}),
					icons: icons
				}));
				componentHandler.upgradeAllRegistered();
			}

			function reload(message) {
				if (message != null) {
					console.log(message.status + " " + message.from);
				}
				if (req != null) {
					clearTimeout(req);
				}
				req = setTimeout(function () {
					$.get("/list-apps", reloaded);
				}, 200);
			}

			function reloaded(appList) {
				appList.sort(function (app1, app2) {
					var installed1 = ('container_id' in app1) || app1.status === 'installing';
					var installed2 = ('container_id' in app2) || app2.status === 'installing';
					if (installed1 && !installed2) {
						return -1;
					}
					if (!installed1 && installed2) {
						return 1;
					}
					return app1.name.localeCompare(app2.name);
				});
				apps = appList;
				updateAppList(appList);
				// TODO Poll statuses
			}

			var socket = io.connect(window.location.protocol + '//' + window.location.host);
			socket.on('docker-connect', function () {
				console.log('connected');
				reload();
			});
			socket.on('docker-disconnect', function () {
				loaded = false;
				console.log('disconnected');
			});
			socket.on('docker-create', reload);
			socket.on('docker-start', reload);
			socket.on('docker-stop', reload);
			socket.on('docker-die', reload);
			socket.on('docker-destroy', reload);